#include<queue>
#include<vector>
#include<iostream>
using namespace std;


Using the max heap
TIme : klog(k) + (n-k) logk // efficeint 
Time : O(n.logk)
/*
We can easily solve this problem in O(n.log(k)) time by using a max-heap, where n is the size of the input. The idea is to simply construct a max-heap
of size k and insert the first k elements of array [0…k-1] into the max-heap. Then for each of the remaining array elements [k…n-1], if that element is 
less than the heap’s root, replace the root with the current element. Repeat this process till the array is exhausted. Now, we will be left with k smallest 
array elements in the max-heap, and k'th smallest element will reside at the root of the max-heap.
*/

int kthsmallestEfficient(int arr[],int n,int k)
{
//we want kth smallest value.create max heap of size k
       priority_queue<int> pq;
       for(int i=0;i<k;i++)
          pq.push(arr[i]); // element at top is kth smallest ele
       
       
       for(int i=k;i<n;i++)
       {
          if(arr[i] < pq.top())
          {
              pq.pop();
              pq.top();
          }
       }
       
       return pq.top();
}
/*************************/
Time : O(n + k.logn)
/*
We can easily solve this problem in O(n + k.log(n)) by using a min-heap. The idea is to construct a min-heap of size n and insert all the array
elements input[0…n-1] into it. Then pop first k-1 elements from it. Now k'th smallest element will reside at the root of the min-heap.
*/


int kthsmallest(int arr[],int n,int k)
{
   //we want kth smallest value.create max heap of size k
   priority_queue<int> pq;
   for(int i=0;i<k;i++)
      pq.push(arr[i]); // element at top is kth smallest ele
   
   
   for(int i=k;i<n;i++)
   {
      if(arr[i] < pq.top())
      {
          pq.pop();
          pq.top();
      }
   }
   
   return pq.top();

}


TIME : O(N) + k*log(N) 
//O(N) create min heap
//k*log(N) -- remove  top and heapify each times .

int kthsmallest(int arr[],int n,int k)
{
    //create min heap
    priority_queue<int,vector<int>,greater<int> > pq;
    
    for(int i=0;i<n;i++)
        pq.push(arr[i]);
    
    if(k==1)
        return pq.top();
    
    int i=1;
    while(i!=k)
    {
        pq.pop();
        i++;
    }
    
    return pq.top();
}


int main()
{
    int arr[] = {5,4,23,1,0,};
    int size = sizeof(arr)/sizeof(int);
    
    cout<<kthsmallest(arr,size,3)<<endl;

    
}
