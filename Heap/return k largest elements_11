/*

since prob talks abt largest use the min heap.
create a min heap of k elements : Time O (k*logk)
for remaning elements heapify . Worst case Time O( (n-k) *logk)

total time = O( k*logk + (n-k)*log k)
space O(n)

*/
  
  
  
  vector<int> kLargest(int arr[], int n, int k)
	{
	    priority_queue<int,vector<int>,greater<int>> minheap;
	    //create a min heap of k elements
	    for(int i=0;i<k;i++)
	       minheap.push(arr[i]);
	       
	     for(int i=k;i<n;i++)
	     {
	         if(arr[i] > minheap.top())
	         {
	             minheap.pop();
	             minheap.push(arr[i]);
	         }
	     }
	     

	vector<int> res;
	for(int i=0;i<k;i++)
	{
	    res.push_back(minheap.top());
	    minheap.pop();
	}
	std::reverse(res.begin(),res.end());
	  
	     return res; 
	}


};
