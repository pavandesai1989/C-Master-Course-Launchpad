#include<iostream>
#include<vector>
#include<utility>

using namespace std;


bool compareknap(pair<int,int> a,pair<int,int> b)
{
    double  x = (double)a.first/(double)a.second;
    double  y = (double)b.first/(double)b.second;
    
    return x > y;  //important sort in decreasing order!!
}

double fractionalKnapsack(int W, pair<int,int> arr[], int n)
{
    //sort based on the value/wt
    sort(arr,arr+n,compareknap);
    double res = 0.0;
    
    for(int i=0;i<n;i++)
    {
        if(arr[i].second <= W)
        {
            res += arr[i].first;
            W = W - arr[i].second;
        }
        else
        {
            double fraction = double( arr[i].first / arr[i].second  );
            res = res + ( W * fraction );
        }
    }
    return res;
    
}

int main()
{
    int W = 50; //    Weight of knapsack
    //pair<value,weight>
    pair<int,int> arr[] = { { 60, 10 }, { 100, 20 }, { 120, 30 } };

    int n = sizeof(arr) / sizeof(arr[0]);

    // Function call
    cout << "Maximum value we can obtain = "
         << fractionalKnapsack(W, arr, n);   //op is 240
    return 0;
}
