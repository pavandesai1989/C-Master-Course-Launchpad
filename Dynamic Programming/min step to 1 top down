Given a positive integer 'n', find and return the minimum number of steps that 'n' has to take to get reduced to 1. You can perform any one of the following 3 steps:
1.) Subtract 1 from it. (n = n - Â­1) ,
2.) If its divisible by 2, divide by 2.( if n % 2 == 0, then n = n / 2 ) ,
3.) If its divisible by 3, divide by 3. (if n % 3 == 0, then n = n / 3 ).  
Write brute-force recursive solution for this.



#include <iostream>
#include<climits>
using namespace std;

int minstepsone(int n,int dp[])
{
    if(n==1)
      return 0;

    if(dp[n]!=0)
       return dp[n];

    int x,y,z;   

    x = y = z = INT_MAX;  
    x = minstepsone(n-1,dp);
    
    if(n%2 == 0 )
       y = minstepsone(n/2,dp);

    if(n%3 == 0)
       z = minstepsone(n/3,dp);

    dp[n] = min(x,min(y,z)) + 1;

    return dp[n];
}

int main() {
	int n;
    cin>>n;

    int dp[100] = {0};
    cout<<minstepsone(n,dp)<<endl;
	return 0;
}

