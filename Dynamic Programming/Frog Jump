/*
There is a frog on the 1st step of an N stairs long staircase. The frog wants to reach the Nth stair. HEIGHT[i] is the height of the (i+1)th 
stair.If Frog jumps from ith to jth stair, the energy lost in the jump is given by |HEIGHT[i-1] - HEIGHT[j-1] |.In the Frog is on ith staircase,
he can jump either to (i+1)th stair or to (i+2)th stair. Your task is to find the minimum total energy used by the frog to reach from 1st stair 
to Nth stair.
*/

/************************* Memoization********************/
/*
 Time : O(N)
 space : O(N)
*/

#include<climits>
int f(int n,vector<int> &heights,vector<int> &dp)
{
    //base case 
    if( n == 0)  return 0;
    
    if(dp[n]!=-1)
        return dp[n];
    
    int left = f(n-1,heights,dp) + abs(heights[n] - heights[n-1]);
    int right = INT_MAX;
    
    if(n>1)
       right = f(n-2,heights,dp) + abs(heights[n] - heights[n-2]); 
    
    return dp[n] = min(left,right);
}

int frogJump(int n, vector<int> &heights)
{
    vector<int> dp(n+1,-1);
    return f(n-1,heights,dp);
}


/********** Tabulation ********************/
int frogJump(int n, vector<int> &heights)
{
    vector<int> dp(n,0);
    //base case
    dp[0] = 0;
    for(int i=1;i<n;i++)
    {
        int left = dp[i-1] + abs(heights[i] - heights[i-1]);
        int right = INT_MAX;
        if(i > 1)
            right = dp[i-2] + abs(heights[i] - heights[i-2]);
        dp[i] = min(left,right);
    }
    
    return dp[n-1];
}

Time : O(N)
space : O(N) no stack space 

******** space optimization*************/
int frogJump(int n, vector<int> &heights)
{
    //base case
    int prev = 0;
    int prev2 = 0;
    
    for(int i=1;i<n;i++)
    {
        int fs = prev + abs(heights[i] - heights[i-1]);
        int ss = INT_MAX;
        if(i > 1)
            ss = prev2 + abs(heights[i] - heights[i-2]);
        int curri = min(fs,ss);
        prev2 = prev;
        prev = curri;
    }
    
    return prev;
}



















