#include<iostream>
#include<vector>
#include<queue>
using namespace std;

template<typename T>
class TreeNode
{
public:
	T data;
	vector<TreeNode<T>*> children;

public:
	TreeNode(T data)
	{
		this->data = data;
	}
};


void printPostOrder(TreeNode<int>* root)
{
	for (int i = 0; i < root->children.size(); i++)
	{
		printPostOrder(root->children[i]);
	}

	cout << root->data << " ";
}

TreeNode<int>* maxDataNode(TreeNode<int>* root)
{
	TreeNode<int>* res = new TreeNode<int>(root->data);

	if (root->data > res->data)
	{
		return root;
	}

	for (int i = 0; i < root->children.size(); i++)
	{
		res = maxDataNode(root->children[i]);
	}

	return res;
}

/*void PrintTree(TreeNode<int>* root)
{
	//just print the root node
	cout << root->data << endl;

	//tell recursion to print.
	for (int i = 0; i < root->children.size(); i++)
	{
		PrintTree(root->children[i]);
	}
}*/

//modify above print as below 
void PrintTree(TreeNode<int>* root)
{
	//handle the edge case
	if (!root)  return;

	//just print the root node
	cout << root->data << ":";

	for (int i = 0; i < root->children.size(); i++){
		cout << root->children[i]->data << ",";
	}
	cout << endl;

	//tell recursion to print.
	for (int i = 0; i < root->children.size(); i++){
		PrintTree(root->children[i]);
	}
}


TreeNode<int>* takeinput()
{
	int rootdata;
	cout << "enter the root data" << endl;
	cin >> rootdata;

	//create root node
	TreeNode<int>* root = new TreeNode<int>(rootdata);

	//ask how many children does this root has
	int n;
	cout << "enter number of children of " << rootdata << endl;
	cin >> n;

	for (int i = 0; i < n; i++)
	{
		TreeNode<int>* child = takeinput();
		root->children.push_back(child);
	}

	return root;
}

int numNodes(TreeNode<int>* root)
{
	int ans = 1;
	//run loop over childrens
	for (int i = 0; i < root->children.size(); i++)
	{
		ans += numNodes(root->children[i]);
	}
	return ans;
}

/*
sample input : 
1 1 2 1 3 1 4 1 5 0

sample output :
1:2
2:3
3:4
4:5
5:
*/

TreeNode<int>* takeInputLevelWise()
{
	//we want to take root input
	int rootdata;
	cout << "enter the root data" << endl;
	cin >> rootdata;

	//create a node
	TreeNode<int>* root = new TreeNode<int>(rootdata);

	//create a queue and push root
	queue<TreeNode<int>*> pendingnodes;
	pendingnodes.push(root);

	while (!pendingnodes.empty())
	{
		//take front of queue and ask for childrens
		TreeNode<int>* front = pendingnodes.front();
		//pop it
		pendingnodes.pop();
		cout << "enter number of children of " << front->data << endl;
		int numchild;
		cin >> numchild;

		for (int i = 0; i < numchild; i++)
		{
			cout << "enter the " << i + 1 << "st child of " << front->data << endl;
			int childdata;
			cin >> childdata;

			//create a node and connect to root and push in the queue
			TreeNode<int>* child = new TreeNode<int>(childdata);
			front->children.push_back(child);
			pendingnodes.push(child);
		}
	}
	return root;
}

void printLevelWise(TreeNode<int>* root)
{
	if (!root)
		return;

	//create a queue
	queue<TreeNode<int>*> q;
	//push the root node and NULL to go to next line
	q.push(root);
	//will print the nodes till queue is not empty 
	while (!q.empty())
	{
		//take the front node
		TreeNode<int>* front = q.front();
		//pop the front node
		q.pop();

		if (front != NULL)
		{
			//print the data
			cout << front->data << ":";
			//push the childrens of front to the queue
			int numchild = front->children.size();
			for (int i = 0; i < numchild; i++)
			{
				cout << front->children[i]->data;
				if (i < numchild - 1)
					cout << ",";
				q.push(front->children[i]);
			}
			cout << endl;
		}
	}
}


int sumOfNodes(TreeNode<int>* root)
{
	int res = root->data;

	for (int i = 0; i < root->children.size(); i++)
	{
		res += sumOfNodes(root->children[i]);
	}
	return res;
}

int getLeafNodeCount(TreeNode<int>* root)
{
	if (!root)
		return 0;

	int res = 0;
	//base case
	if (root->children.size() == 0)
		return 1;

	for (int i = 0; i < root->children.size(); i++)
	{
		res += getLeafNodeCount(root->children[i]);
	}

	return res;

}


void PrintLevelWise(TreeNode<int>* root, int level)
{
	if (!root)
		return;

	if (level == 0)
	{
		cout << root->data << "  ";
		return;
	}

	for (int i = 0; i < root->children.size(); i++)
	{
		PrintLevelWise(root->children[i], level - 1);
	}
}

int main()
{
	/*
	TreeNode<int>* root = new TreeNode<int>(1);
	TreeNode<int>* node1 = new TreeNode<int>(2);
	TreeNode<int>* node2 = new TreeNode<int>(3);

	//they are not connected. above we only created 3 nodes
	root->children.push_back(node1);
	root->children.push_back(node2);

	*/

	TreeNode<int>* root = takeInputLevelWise();
	//print the tree
	//PrintTree(root);

	PrintLevelWise(root,2);


	//TODO delete the tree

	return 0;
}
